version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            curl -H "token: f220e605-9bb6-4ed7-a25e-98165078f73e" --request GET "https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}"
            SUCCESS=1
            if [[ "$SUCCESS" == 1 ]]
            then
              cd /tmp/workspace/backend
              npm install
              npm run migrations:revert
            fi

  notify:
    description: notify slack
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Build Failed :x:",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "Build <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM> for: *$CIRCLE_JOB* failed"
            			}
            		}
            	]
            }

      - slack/notify:
          event: pass
          custom: |
            {
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Build Passed :white_check_mark:",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "Build <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM> for: *$CIRCLE_JOB* passed"
            			}
            		}
            	]
            }


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

      - notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build

      - notify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm run test
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build
      - notify

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build
      - notify

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force

      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build
      - notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: backend scan
          command: |
            cd backend
            npm audit --audit-level=critical || npm audit fix --audit-level=critical --force

      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build
      - notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=assignment3 \
              --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=assignment3 \
              --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "$(aws ec2 describe-instances  --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query 'Reservations[*].Instances[*].PublicIpAddress' --output=text)" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.8
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "99:fd:ac:38:59:46:df:c1:e2:09:70:90:24:49:43:36"
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install -y awscli
            pip install ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

      - destroy-environment
      - notify

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: f220e605-9bb6-4ed7-a25e-98165078f73e" \
            --request PUT --data "1" https://api.memstash.io/values/migration_"${CIRCLE_WORKFLOW_ID:0:7}"

      - revert-migrations
      - destroy-environment
      - notify

  deploy-frontend:
    docker:
      - image: nikolaik/python-nodejs:python3.8-nodejs14
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: install aws cli
          command: |
            apt-get update
            apt-get install -y awscli

      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=$(sed -n '2p' .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm run build
            aws s3 cp ./dist s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}"/ --recursive

      - revert-migrations
      - destroy-environment
      - notify

  deploy-backend:
    docker:
      - image: nikolaik/python-nodejs:python3.8-nodejs14
    working_directory: /tmp/workspace
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "99:fd:ac:38:59:46:df:c1:e2:09:70:90:24:49:43:36"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: install python and aws cli
          command: |
            apt-get update
            apt-get install -y awscli
            apt-get install -y rsync
            pip install ansible

      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

      - revert-migrations
      - destroy-environment
      - notify

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli

      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Backend smoke test
          command: |
            BACKEND_IP=$(sed -n '2p' .circleci/ansible/inventory.txt)
            echo $BACKEND_IP
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      - revert-migrations
      - destroy-environment
      - notify

  cloudfront-update:
    docker:
       - image: amazon/aws-cli
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run: |
          yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y
          yum install jq -y
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

            export newWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo New workflow Id: "${newWorkflowID}"
            echo Old workflow Id: "${OldWorkflowID}"

            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]] && [[ -n "$OldWorkflowID" ]]
            then
              echo deleting old stuff
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "frontend-stack-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "backend-stack-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "cloudfront-stack-${OldWorkflowID}"
            fi

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project=assignment3 \
            --stack-name "cloudfront-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

          environment:
            TERM: xterm-color

      - destroy-environment
      - notify

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [ build-frontend ]
      - test-backend:
          requires: [ build-backend ]
      - scan-backend:
          requires: [ build-backend ]
      - scan-frontend:
          requires: [ build-frontend ]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [ configure-infrastructure ]
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          requires: [ run-migrations ]
      - deploy-backend:
          requires: [ run-migrations ]
      - smoke-test:
          requires: [ deploy-backend, deploy-frontend ]
      - cloudfront-update:
          requires: [ smoke-test ]
